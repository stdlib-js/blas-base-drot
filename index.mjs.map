{"version":3,"file":"index.mjs","sources":["../lib/drot.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( x.length, x, 1, y, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ ~4.4, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ ~4.2, 4.4, 4.6, 4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, y, strideY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\t// If both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ttmp = ( c * x[ i ] ) + ( s * y[ i ] );\n\t\t\ty[ i ] = ( c * y[ i ] ) - ( s * x[ i ] );\n\t\t\tx[ i ] = tmp;\n\t\t}\n\t\treturn y;\n\t}\n\t// If both strides are not equal to `1`...\n\tif ( strideX < 0 ) {\n\t\tix = ( 1 - N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1 - N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c * x[ ix ] ) + ( s * y[ iy ] );\n\t\ty[ iy ] = ( c * y[ iy ] ) - ( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Float64Array} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n*\n* drot( 4, x, 1, 1, y, 1, 1, 0.8, 0.6 );\n* // x => <Float64Array>[ 1.0, ~5.8, 7.2, 8.6, 10.0 ]\n* // y => <Float64Array>[ 6.0, 4.4, ~4.6, ~4.8, 5.0 ]\n*/\nfunction drot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c * x[ ix ] ) + ( s * y[ iy ] );\n\t\ty[ iy ] = ( c * y[ iy ] ) - ( s * x[ ix ] );\n\t\tx[ ix ] = tmp;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default drot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport drot from './drot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drot;\n"],"names":["drot","N","x","strideX","y","strideY","c","s","tmp","ix","iy","i","offsetX","offsetY","setReadOnly","ndarray"],"mappings":";;wHA4CA,SAASA,EAAMC,EAAGC,EAAGC,EAASC,EAAGC,EAASC,EAAGC,GAC5C,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOG,EAGR,GAAiB,IAAZD,GAA6B,IAAZE,EAAgB,CACrC,IAAMM,EAAI,EAAGA,EAAIV,EAAGU,IACnBH,EAAQF,EAAIJ,EAAGS,GAAUJ,EAAIH,EAAGO,GAChCP,EAAGO,GAAQL,EAAIF,EAAGO,GAAUJ,EAAIL,EAAGS,GACnCT,EAAGS,GAAMH,EAEV,OAAOJ,CACP,CAYD,IATCK,EADIN,EAAU,GACP,EAAIF,GAAME,EAEZ,EAGLO,EADIL,EAAU,GACP,EAAIJ,GAAMI,EAEZ,EAEAM,EAAI,EAAGA,EAAIV,EAAGU,IACnBH,EAAQF,EAAIJ,EAAGO,GAAWF,EAAIH,EAAGM,GACjCN,EAAGM,GAASJ,EAAIF,EAAGM,GAAWH,EAAIL,EAAGO,GACrCP,EAAGO,GAAOD,EACVC,GAAMN,EACNO,GAAML,EAEP,OAAOD,CACR,CCnCA,SAASJ,EAAMC,EAAGC,EAAGC,EAASS,EAASR,EAAGC,EAASQ,EAASP,EAAGC,GAC9D,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOG,EAKR,IAHAK,EAAKG,EACLF,EAAKG,EAECF,EAAI,EAAGA,EAAIV,EAAGU,IACnBH,EAAQF,EAAIJ,EAAGO,GAAWF,EAAIH,EAAGM,GACjCN,EAAGM,GAASJ,EAAIF,EAAGM,GAAWH,EAAIL,EAAGO,GACrCP,EAAGO,GAAOD,EACVC,GAAMN,EACNO,GAAML,EAEP,OAAOD,CACR,CCrCAU,EAAAd,EAAA,UAAAe"}